1
00:00:00,000 --> 00:00:06,047
Welcome back to,
our discussion about futures.

2
00:00:06,047 --> 00:00:11,402
And I left you a little bit in the dark,
the last time when

3
00:00:11,402 --> 00:00:16,878
I showed you how to, you know,
express reading from memory.

4
00:00:16,878 --> 00:00:24,087
Followed by sending the packets from
the US and Europe back, with futures.

5
00:00:24,087 --> 00:00:29,380
And I don't know if you remember but
our code looked a little bit like a mesh,

6
00:00:29,380 --> 00:00:34,368
where we couldn't you know,
get everything to wire up together.

7
00:00:34,368 --> 00:00:40,260
But fortunately, futures have a,

8
00:00:42,520 --> 00:00:46,180
a lot of higher order
operators defined on them.

9
00:00:46,180 --> 00:00:50,971
And, and you will recognize the same
higher order operators that we

10
00:00:50,971 --> 00:00:53,336
saw on try and that we see on list.

11
00:00:53,336 --> 00:01:00,004
And that we see, many, many times,
everywhere, such as filter, flatMap.

12
00:01:00,004 --> 00:01:04,862
And then of course, there are certain
domain specific operators

13
00:01:04,862 --> 00:01:09,592
that are only defined on future,
and that one is recoverWith.

14
00:01:09,592 --> 00:01:11,978
And recoverWith there, you see,

15
00:01:11,978 --> 00:01:17,150
takes a partial function that takes
a throwable and returns a future.

16
00:01:17,150 --> 00:01:17,920
All right?

17
00:01:17,920 --> 00:01:21,910
And there we have, our friends,
the future constructor.

18
00:01:21,910 --> 00:01:27,667
So now let's see how we can
use this to improve our code.

19
00:01:27,667 --> 00:01:30,879
This is what we were stuck with.

20
00:01:30,879 --> 00:01:36,130
And we read from memory, and then we kind
of, you know, did packet onComplete.

21
00:01:36,130 --> 00:01:40,000
And then, you know, we had the
confirmation of the right type but this,

22
00:01:40,000 --> 00:01:44,131
you know, like all this pattern matching
and nesting, it just looks messy.

23
00:01:44,131 --> 00:01:49,910
This is not codes that looks beautiful and
elegant.

24
00:01:49,910 --> 00:01:55,570
And if we're doing, you know,
functional programming style coding,

25
00:01:55,570 --> 00:02:00,260
one of the main things that we want to
achieve is that the code looks elegant.

26
00:02:00,260 --> 00:02:04,320
This doesn't look elegant,
how can we improve that?

27
00:02:04,320 --> 00:02:06,010
By using flatMap.

28
00:02:06,010 --> 00:02:11,162
So flatMap, again,
will hide all this plumbing and

29
00:02:11,162 --> 00:02:17,880
pattern matching for us, such that we can
write nice, smooth, straight line code.

30
00:02:17,880 --> 00:02:22,490
So, let's use flatMap, and here we go!

31
00:02:22,490 --> 00:02:24,990
What we do is we read from memory.

32
00:02:24,990 --> 00:02:27,790
We get a Future of Array of Bytes.

33
00:02:27,790 --> 00:02:29,480
That's called that packet.

34
00:02:29,480 --> 00:02:31,904
And then we just flatMap over that.

35
00:02:31,904 --> 00:02:35,890
So, flatMap will take a Future
of Array of Bytes and

36
00:02:35,890 --> 00:02:41,080
give us in that function,
p is now of type Array of Bytes.

37
00:02:41,080 --> 00:02:46,040
And now we can send it to Europe, which
would return a Future of Array of Bytes.

38
00:02:46,040 --> 00:02:51,246
And the type of flatMap,
go here, will all work out.

39
00:02:51,246 --> 00:02:56,214
All right, so
I'm pretty sure that you agree that

40
00:02:56,214 --> 00:03:01,551
this code looks messy and
this code looks beautiful.

41
00:03:01,551 --> 00:03:07,848
So again, flatMap comes to the rescue,
all right.

42
00:03:07,848 --> 00:03:13,730
Now, let's, drive in,
dive in a little bit and,

43
00:03:13,730 --> 00:03:18,140
and look kind of, you know,
how packets are sent under the covers.

44
00:03:18,140 --> 00:03:21,750
Again, this is, you know, all, toy code.

45
00:03:21,750 --> 00:03:27,740
And the reason is that we need some
concrete code to, to build some examples.

46
00:03:27,740 --> 00:03:30,930
But this is of course,
not production code.

47
00:03:30,930 --> 00:03:31,980
But let's look here.

48
00:03:31,980 --> 00:03:37,880
Imagine that we have an imaginary
HTTP library that has a constructor,

49
00:03:37,880 --> 00:03:43,940
that given a URL, and the request,
will return a response.

50
00:03:43,940 --> 00:03:49,040
Now, an HTTP library is probably going
to make a call across a network.

51
00:03:49,040 --> 00:03:54,120
So, the result of, calling apply on HTTP,

52
00:03:54,120 --> 00:03:57,240
will be a Future of a Response.

53
00:03:57,240 --> 00:04:00,920
And it runs an HTTP request,
asynchronously.

54
00:04:00,920 --> 00:04:01,830
We don't care.

55
00:04:01,830 --> 00:04:08,640
As long as, given the URL and the Request,
we now get a Future of a Response.

56
00:04:08,640 --> 00:04:15,420
So now how can we implement sent packets
from the US to Europe and back with this?

57
00:04:15,420 --> 00:04:20,520
Well, we first create a URL
to some server in Europe.

58
00:04:20,520 --> 00:04:24,003
We create a Request from the packet.

59
00:04:24,003 --> 00:04:30,667
And then we call that, we call then filter
such that we, they're response is okay.

60
00:04:30,667 --> 00:04:36,330
And then we map their response
back to an Array of Bytes.

61
00:04:36,330 --> 00:04:42,980
Now, this is still not safe in the general
sense because it can still fail,

62
00:04:42,980 --> 00:04:47,810
because maybe, you know, the packet,
the, the network is down.

63
00:04:47,810 --> 00:04:51,580
So this packet will not reach Europe.

64
00:04:51,580 --> 00:04:56,060
So let's try to make this code
more resilient, all right?

65
00:04:56,060 --> 00:05:00,580
So we want to make 100% sure
that when we send the packet,

66
00:05:00,580 --> 00:05:04,820
that it actually reaches
the server in Europe.

67
00:05:04,820 --> 00:05:10,850
One way to do that is why don't we
send this packet kind of twice,

68
00:05:10,850 --> 00:05:13,150
all right, to two different servers.

69
00:05:13,150 --> 00:05:16,178
So here is what we do is we kind of,
you know,

70
00:05:16,178 --> 00:05:21,810
send the packet to
a mail server in Europe.

71
00:05:21,810 --> 00:05:27,407
We send the packet to a mail server
in the US just, you know, to be safe.

72
00:05:27,407 --> 00:05:31,977
And then we zip the confirmations, to get,

73
00:05:31,977 --> 00:05:36,323
you know, the, the, a pair of the,

74
00:05:36,323 --> 00:05:40,670
response from sending
the packet to Europe and

75
00:05:40,670 --> 00:05:45,940
the response from sending
the packet to the US, right?

76
00:05:45,940 --> 00:05:50,900
So now, we should be safe because
we're sending it kind of twice.

77
00:05:51,910 --> 00:05:53,878
But is this any better really?

78
00:05:53,878 --> 00:05:59,423
Well, not because if you remember
what zip does with lists.

79
00:05:59,423 --> 00:06:04,547
Zip, if it takes an empty list and another
list, it will just return the empty list.

80
00:06:04,547 --> 00:06:11,461
So zip will always kind of confirm to
the shortest list that you're zipping.

81
00:06:11,461 --> 00:06:14,420
And the same is true when
you're zipping two futures.

82
00:06:14,420 --> 00:06:20,058
So, in that case, you know the error
case is the empty list and

83
00:06:20,058 --> 00:06:24,440
the success case, is the non empty list.

84
00:06:24,440 --> 00:06:30,720
So when I'm zipping two futures and one
of them fails, the whole zip will fail.

85
00:06:32,030 --> 00:06:39,288
So even though I'm doing a lot of work
to send this packet to both Europe and

86
00:06:39,288 --> 00:06:46,680
back, it doesn't help me because the zip
will fail when one of them fails.

87
00:06:46,680 --> 00:06:48,290
So, all right.

88
00:06:48,290 --> 00:06:50,250
So this is not very resilient.

89
00:06:51,740 --> 00:06:55,878
But there was this this,
these two functions.

90
00:06:55,878 --> 00:06:58,193
Well, the one that I showed you, but

91
00:06:58,193 --> 00:07:02,140
there's another one,
recoverWith and recover.

92
00:07:02,140 --> 00:07:06,904
And you can see that recoverWith
looks a little bit like

93
00:07:06,904 --> 00:07:12,690
flatMap because it takes a function that
takes an exception and returns a Future.

94
00:07:12,690 --> 00:07:17,450
And so it's kind of the,
the error case for flatMap.

95
00:07:17,450 --> 00:07:22,293
And then we have recover which
takes a Throwable and returns a T,

96
00:07:22,293 --> 00:07:25,310
which is kind of the map for
the error case.

97
00:07:25,310 --> 00:07:30,030
So let's see if we can use these
functions to write a more resilient

98
00:07:31,110 --> 00:07:34,810
version of sending packets, all right?

99
00:07:34,810 --> 00:07:40,180
So there was our old version,
we were just going to send it.

100
00:07:40,180 --> 00:07:45,713
What we're going to do now is we're going
to send the packet to Europe first.

101
00:07:45,713 --> 00:07:50,546
When that fails, we use recoverWith, okay.

102
00:07:50,546 --> 00:07:56,121
And then, you know, what we get is we
get the function from throwable to,

103
00:07:56,121 --> 00:07:57,650
Future of t, right?

104
00:07:57,650 --> 00:07:58,586
That's what we need?

105
00:07:58,586 --> 00:08:02,711
So then we just send it to Europe,
and then, sorry, to the US.

106
00:08:02,711 --> 00:08:08,265
And when that fails, we just return
the error message with recover,

107
00:08:08,265 --> 00:08:12,878
and if it succeeds, you know,
we're done, all right.

108
00:08:12,878 --> 00:08:16,681
Now the problem with this code is that,
you know,

109
00:08:16,681 --> 00:08:20,588
we're really trying to
send the packet to Europe.

110
00:08:20,588 --> 00:08:25,027
But when,
when it goes wrong sending it to the US,

111
00:08:25,027 --> 00:08:28,211
we get the error message for the US.

112
00:08:28,211 --> 00:08:32,428
So this code is still not really good, but

113
00:08:32,428 --> 00:08:38,170
it's already much better than
our naive attempt, all right?

114
00:08:38,170 --> 00:08:43,272
But the, the thing here that I want
to focus on is that recover and

115
00:08:43,272 --> 00:08:47,900
recoverWith are like the map and
the flatMap, but then for

116
00:08:47,900 --> 00:08:52,320
the error case of the of the Future,
all right?

117
00:08:52,320 --> 00:08:56,160
So instead of you know, getting the value,
they get the exception but

118
00:08:56,160 --> 00:08:59,200
then the signatures are the same for
the rest.

119
00:08:59,200 --> 00:09:02,851
So there's an error channel and
a regular channel, and

120
00:09:02,851 --> 00:09:07,002
they have the same operators
defined on them, all right.

121
00:09:07,002 --> 00:09:11,336
We're going to revisit this code,
in the next section.

122
00:09:11,336 --> 00:09:14,765
And then we're going to do
a little bit of kicking out, and

123
00:09:14,765 --> 00:09:18,550
trying to do some hipster functional
programming, so see you soon.

