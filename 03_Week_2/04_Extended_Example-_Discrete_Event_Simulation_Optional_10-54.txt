For the rest of this week, we will
do a larger example on Discrete Event
Simulation.
The essential idea is that we will use
mutable
variables to simulate change in quantities
in the real world.
As a side effect, so to speak, we will
also learn how to structure a system into
a sequence of layers and some of these
layers will be domain specific languages.
Concretely we'll construct
the digital circuit simulator and that
simulator itself is
based on the general framework for
Discrete Event Simulation.
Simulation and digital circuits by
themselves could probably take up
a complete course but with the right tools
at our
disposal, we are going to see, that we can
simplify
it enough to compress it into less than
one hour.
So, then lets get started.
Let's start with a small description
language for digital circuits.
A digit circuit is composed of wires and
functional components.
The wires transport signals that are
transformed by the components.
Because we are dealing with digital
circuits
and not analogue ones, we represent the
signals
[INAUDIBLE]
simply using the booleans true and false.
The base components are also called Gates
and they are the Inverter
[INAUDIBLE]
whose output is the inverse of its input.
The AND Gate, that forms the conjunction
of its two inputs.
And the OR Gate, that forms the
disjunction of its two inputs.
From these basic components, we can
construct others,
by combining them using wires to connect
them.
Another thing that's important is that the
components have a reaction time that's
called
delay, that means the outputs don't change
immediately after a change
to their inputs there's a delay until that
change takes place.
Digital circuits are usually described by
diagrams and the basic
components of these diagrams the Gates,
they are drawn as follows.
Let's start with the Inverter.
So the Inverter is simply a triangle with
a dot at the end that transforms its
input here on the left hand side to its
output on the right hand side, and
it's called an Inverter.
The second basic case is the AND Gate.
So that's a written like this.
It takes two inputs and transform them.
Takes the conjunction of the two inputs
and their outputs.
So the output is true if both inputs are
true.
And finally we have the OR Gate,
which takes two inputs and converts them
to an output
which is true if either of the two inputs
is true.
From these basic Gates, we can now
construct more interesting circuits.
So, we are going to show how to construct
a half-adder that takes two inputs
and converts them into a sum and a carry.
So, lets take the two inputs,
call them a and b.
What we would do is, we would form first
the AND of the a and the b.
That's written like this.
And at the same time form the OR of the
two inputs.
That's written like this.
Then we place an Inverter
after the AND.
And finally, another AND Gate here.
And that gives us the sum on this wire and
the carry on this one.
So if you do the math, then we will see
that the sum is
computed by taking the a OR b.
Then we have an AND here.
AND NOT a and b.
So the sum
is set if either a and b are set and not
both, both of them are set.
Where as the carry is a AND b, so if both
a and
b are set, then the carry is one but the
sum is zero.
If either a and b are set, then the sum is
one, and the carry is zero.
So let's wrap this up.
Draw a box around it,
and call it a half-adder, or I've going to
abbreviate that to HA.
You have seen the circuit diagrams.
What we are now after is a textual
language that describes these circuits.
So the idea is that we would have wires,
and the wires are here, named.
So they have names.
What we're going to do also is name the
internal wires,
so there would be a wire here, and a wire
here.
And those wires we can create using a
class wire.
So we can new, create new wires by writing
val a
equals new wire, then b equals new wire, c
equals new wire.
That would create the three new wires a, b
and c or equivalently we can abbreviate
to that to just writing val a, b, c equals
new Wire.
And that way we can create
all the wires in our circuit diagram, that
you see here.
And finally, we can place the Gates
between the wires.
So one thing that's important here is that
a wire is just, not
just a single straight line but everything
that's connected until it hits a Gate.
So the b wire for instance would con,
consist of this line but also this line
here.
But not that
line here because there's the OR Gate
between that line and that line.
So that's why we have renamed that wire to
be d and that wire to e.
So once we have wires, we still need to
place
the Gates, and that we do with the
following functions.
we have an Inverter function that takes as
inputs
two wires, the input and output wire and
places so
to speak the Inverter as a side effect
onto the circuit board.
And the AND Gate would do the same thing.
It gets two inputs, a1 and a2 and
an output places the AND Gate between
those wires.
And the OR Gate analogously for two inputs
and one output.
So let's see how we would express our
half-adder using this language.
So a half-adder then is a circuit that
takes four wires,
the two inputs a and b and the outputs s
and c.
What we need to create them is two
internal
wires that's a d and e, that's done here.
And then we place an OR Gate between a, b
and d that's that
Gate here.
We place the AND Gate between a, b, and c,
that's that Gate here.
You place the Inverter between c and e.
Here you see it.
And finally we place the AND Gate between
d, e, and s.
And that together wrapped up gives us a
component
which we call a half-adder which is its
own function.
And therefore can be used as another
component just in the same way we can use
OR Gates, AND Gates, and Inverters.
So we can use that the half-adder then to
place between the input and output wires.
So here you see a full-adder that can
be constructed from two half-adders and an
OR Gate.
To understand that, let's draw the diagram
first.
A full-adder takes three inputs, the a,
and the b, and an input carry.
And it works by placing a half-adder
between the b and the input carry.
Then placing another half-adder between
the a and the sum of the first one.
That sum result would give us the final
sum.
And as to the carries, they, we produce
them by
taking the OR of the two carries of the
half-adder.
So here we get the sum, and here we get
the output carry.
Let's name the internal wires.
So we would have the internal sum of the
first half-adder and the two carries call
them c, c1, and c2.
So that would give us a full-adder, of one
bit
[NOISE].
Now to put that in text, ,you see the
function here.
Full-adder takes the three inputs and the
two outputs.
It, there are three internal wires s, c1
and c2.
And there is a half-adder between b,, c
in, s and c1.
There is a half-adder between a.
If the sum of the first one s, sum and c2
and an OR gate between
c1 and c2, and c out.
And now we have a full one bit adder,
which in turn of course, we could use to
produce a eight bit adder, 16 bit adder or
any other circuit you like.
So here's an exercise for you.
I have a mystery function called it f that
connects
three wires a and b the way you see it
here.
And I want you to answer what
logical function does this circuit produce
on
the output wire c.
Is it a AND NOT b, or a AND NOT b AND a?
Or maybe b AND NOT a, or a equals b, or a
NOT equals b, or a multiplied with b?
So to figure out what the circuit
computes, a
good way to proceed is to look at the
internal wires and see what logical
function they would produce.
So if you look at the f for instance, so
as it says that
would be the AND between the a and the e,
and the e itself
is the Inverter of the b.
So that would be AND a AND not
b.
Likewise, the g would be b AND NOT a.
And then we have in the final result f OR
g.
So it means that either a is true and b is
false or b is true and a is false.
And that, those are the two possibilities
that turn the result true.
So that means the result is true whenever
a and b are different.
So the right solution is this one here.

